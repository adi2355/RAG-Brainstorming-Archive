---
description: Database Handling Standards
globs: 
alwaysApply: true
---


# Database Handling Standards

Guidelines for safe and consistent database operations.

<rule>
name: database_handling
description: Standards for database operations and connection management
filters:
  - type: content
    pattern: "(?s).*sqlite3.*|.*conn\\s*=\\s*sqlite3\\.connect.*|.*cursor\\s*=\\s*conn\\.cursor.*"

actions:
  - type: suggest
    message: |
      # Database Handling Standards
      
      Follow these practices for all database operations:
      
      ## Connection Management
      
      1. Always use a connection context pattern:
      
      ```python
      conn = sqlite3.connect(config.DB_PATH)
      try:
          cursor = conn.cursor()
          # ... operations
          conn.commit()  # Only if making changes
      except Exception as e:
          logger.error(f"Database error: {str(e)}")
          if writing_operation:
              conn.rollback()
          raise
      finally:
          conn.close()
      ```
      
      2. For simpler read operations:
      
      ```python
      def get_db():
          """Get database connection with row factory for dict-like rows"""
          conn = sqlite3.connect(config.DB_PATH)
          conn.row_factory = sqlite3.Row
          return conn
          
      # Usage
      with get_db() as conn:
          cursor = conn.cursor()
          cursor.execute("SELECT * FROM table WHERE condition = ?", (value,))
          results = cursor.fetchall()
      # Connection automatically closed after with block
      ```
      
      ## Query Safety
      
      1. Always use parameterized queries to prevent SQL injection:
      
      ```python
      # GOOD
      cursor.execute("SELECT * FROM table WHERE id = ?", (user_id,))
      
      # BAD - SQL Injection vulnerability
      cursor.execute(f"SELECT * FROM table WHERE id = {user_id}")
      ```
      
      2. Validate input parameters before using in queries
      
      ## Database Schema
      
      1. Use the proper tables for different content types:
         - `ai_content` for all content items
         - `content_embeddings` for vector embeddings
         - `concepts` for extracted AI concepts
         - `concept_relationships` for relationships between concepts
         
      2. Use appropriate indexes for frequently queried columns
      
      ## Error Handling
      
      1. Log specific database errors with context
      2. Use appropriate HTTP status codes in API responses for database errors
      3. Don't expose raw SQL errors to users

examples:
  - input: |
      def get_data(query_param):
          conn = sqlite3.connect(config.DB_PATH)
          cursor = conn.cursor()
          cursor.execute(f"SELECT * FROM table WHERE param = '{query_param}'")
          data = cursor.fetchall()
          conn.close()
          return data
    output: |
      def get_data(query_param: str) -> List[Dict[str, Any]]:
          """
          Safely retrieve data from database based on parameter.
          
          Args:
              query_param: The parameter to filter by
              
          Returns:
              List of matching data items
          """
          conn = sqlite3.connect(config.DB_PATH)
          try:
              # Use row_factory for named columns
              conn.row_factory = sqlite3.Row
              cursor = conn.cursor()
              
              # Use parameterized query for safety
              cursor.execute("SELECT * FROM table WHERE param = ?", (query_param,))
              
              # Convert rows to dictionaries
              return [dict(row) for row in cursor.fetchall()]
          except Exception as e:
              logger.error(f"Database error when fetching data: {str(e)}")
              raise
          finally:
              conn.close()

metadata:
  priority: high
  version: 1.0
</rule>