---
description: Chat Command Auto-Tracker
globs: *
alwaysApply: false
---

# Chat Command Auto-Tracker

Automatically detects and logs commands mentioned in chat conversations, without requiring explicit requests.

<rule>
name: chat_command_tracker
description: Automatically tracks any commands mentioned in the chat
filters:
  - type: content
    pattern: "(?s).*\\b(script|command|function|utility)\\b.*\\b(created|implemented|built|developed)\\b"
  - type: content
    pattern: "(?s).*(```\\w+\\n.*?```).*"

actions:
  - type: execute
    command: |
      # Extract information from the conversation
      TIMESTAMP=$(date "+%Y-%m-%d %H:%M:%S")
      
      # Try to extract command name
      COMMAND_NAME=$(echo "$TEXT" | grep -oP "(?<=created |implemented |built |developed )(?:a |an |the )?['\"]?\\K[\\w-]+(?:['\"]?| script| command| function| utility)" | head -n 1)
      
      # If no name found, try to extract from code block
      if [ -z "$COMMAND_NAME" ]; then
        # Look for script/file name in code blocks
        COMMAND_NAME=$(echo "$TEXT" | grep -oP '```\\w*\\n\\s*#!/usr/bin/env \\w+\\n\\s*["\']\\K[\\w_-]+' | head -n 1)
        
        # If still not found, try filename patterns
        if [ -z "$COMMAND_NAME" ]; then
          COMMAND_NAME=$(echo "$TEXT" | grep -oP '\\b\\w+_(?:cli|cmd|command|script|tool)\\.\\w+\\b' | head -n 1 | sed 's/\\..*//')
          
          # If still not found, use a generic name
          if [ -z "$COMMAND_NAME" ]; then
            COMMAND_NAME="unnamed-command-$(date +%s)"
          fi
        fi
      fi
      
      # Extract code block if present
      CODE_BLOCK=$(echo "$TEXT" | grep -oP '```\\w*\\n(.*?)```' | head -n 1)
      
      # Try to extract description
      DESCRIPTION=$(echo "$TEXT" | grep -B 1 -A 3 "$COMMAND_NAME" | grep -v "$COMMAND_NAME" | head -n 3 | tr '\n' ' ')
      
      # If description is too short, try to find a better one
      if [ ${#DESCRIPTION} -lt 20 ]; then
        DESCRIPTION=$(echo "$TEXT" | grep -i -B 2 -A 2 "\\b(script|command|function|utility)\\b.*\\b(created|implemented|built|developed)\\b" | grep -v "$COMMAND_NAME" | head -n 3 | tr '\n' ' ')
      fi
      
      # Ensure we have some description
      if [ ${#DESCRIPTION} -lt 20 ]; then
        DESCRIPTION="Command detected in conversation."
      fi
      
      # Ensure commands.md exists
      COMMANDS_FILE="commands.md"
      if [ ! -f "$COMMANDS_FILE" ]; then
        echo "# Commands Tracking\n\nThis file automatically tracks commands mentioned in conversations.\n" > "$COMMANDS_FILE"
      fi
      
      # Append to commands tracking file
      cat >> "$COMMANDS_FILE" << EOF
      
      ## ${COMMAND_NAME}
      
      **Detected:** ${TIMESTAMP}
      
      ### Description
      
      ${DESCRIPTION}
      
      ### Implementation
      
      ${CODE_BLOCK:-"No code implementation detected."}
      
      ### Context
      
      This command was automatically detected in a conversation.
      
      ---
      EOF
      
      echo "Automatically logged command: ${COMMAND_NAME}"
    conditions:
      - pattern: "(?i)\\b(script|command|function|utility)\\b.*\\b(created|implemented|built|developed)\\b"
        message: "Auto-logging mentioned command"
      - pattern: "(?s).*(```\\w+\\n.*?```).*"
        message: "Auto-logging code block as potential command"

  - type: suggest
    message: |
      I've automatically logged this command to the commands tracking file.
      
      If you'd like to view all tracked commands, you can use:
      ```
      ./command_logger.py list
      ```
      
      Or search for specific commands:
      ```
      ./command_logger.py search "keyword"
      ```

examples:
  - input: "I've created a data_processor script that converts CSV files to JSON format."
    output: "Automatically logged command: data_processor"
  
  - input: |
      Here's a utility I implemented to clean up log files:
      
      ```python
      #!/usr/bin/env python3
      
      import os
      import re
      
      def clean_logs(file_path):
          # Implementation details
          pass
          
      if __name__ == "__main__":
          clean_logs("app.log")
      ```
    output: "Automatically logged command with implementation code."

metadata:
  priority: critical
  version: 1.0
</rule>