---
description: API Standards
globs: api/*.py
alwaysApply: false
---

# API Standards

Standards for API development and documentation.

<rule>
name: api_standards
description: Guidelines for developing consistent API endpoints
filters:
  - type: file_path
    pattern: "api/.*\\.py$"
  - type: content
    pattern: "(?s).*@.*_bp\\.route.*|.*def\\s+\\w+\\(.*"

actions:
  - type: suggest
    message: |
      # API Standards
      
      Follow these guidelines for all API endpoints:
      
      ## Endpoint Structure
      
      1. Use RESTful design principles:
         - Resource naming with plural nouns (e.g., `/concepts` not `/concept`)
         - Use HTTP methods appropriately (GET, POST, PUT, DELETE)
         - Use nested resources for relationships (e.g., `/concepts/{id}/related`)
      
      2. Blueprint organization:
         - Group related endpoints in the same blueprint
         - Use appropriate URL prefixes (e.g., `/api/v1/...`)
      
      ## Request Handling
      
      1. Validate all input parameters:
      
      ```python
      @api_bp.route('/search', methods=['POST'])
      def search():
          data = request.json
          
          # Input validation
          if not data or 'query' not in data:
              return jsonify({'error': 'Query parameter is required'}), 400
          
          query = data['query']
          # Validate query is not empty
          if not query.strip():
              return jsonify({'error': 'Query cannot be empty'}), 400
          
          # Extract optional parameters with defaults
          top_k = data.get('top_k', 10)
          
          # Type validation
          try:
              top_k = int(top_k)
              if top_k < 1:
                  raise ValueError("top_k must be positive")
          except (ValueError, TypeError):
              return jsonify({'error': 'top_k must be a positive integer'}), 400
      ```
      
      ## Response Format
      
      1. Use consistent JSON structure:
      
      ```python
      # Success response
      return jsonify({
          'status': 'success',
          'data': {
              # Actual response data
          },
          'meta': {
              'total': total_count,
              'page': page,
              'per_page': per_page
          }
      })
      
      # Error response
      return jsonify({
          'status': 'error',
          'error': {
              'code': 'VALIDATION_ERROR',
              'message': 'Query parameter is required'
          }
      }), 400
      ```
      
      2. Use appropriate HTTP status codes:
         - 200: Success
         - 201: Created
         - 400: Bad Request
         - 404: Not Found
         - 500: Server Error
      
      ## Error Handling
      
      1. Use try/except blocks for all database and external operations
      2. Return appropriate error responses with helpful messages
      3. Log all errors with sufficient context
      
      ## API Documentation
      
      1. Include docstrings for all API functions
      2. Describe purpose, parameters, and responses
      3. Update Swagger documentation when adding new endpoints

examples:
  - input: |
      @api_bp.route('/concepts', methods=['GET'])
      def get_concepts():
          category = request.args.get('category')
          cursor.execute("SELECT * FROM concepts WHERE category = ?", (category,))
          concepts = cursor.fetchall()
          return jsonify(concepts)
    output: |
      @api_bp.route('/concepts', methods=['GET'])
      def get_concepts():
          """
          Get concepts with optional category filtering.
          
          Query parameters:
              category: Optional category to filter concepts
              limit: Maximum number of results (default: 20)
              page: Page number for pagination (default: 1)
              
          Returns:
              JSON object with concept data and metadata
          """
          # Extract and validate parameters
          category = request.args.get('category')
          limit = request.args.get('limit', 20)
          page = request.args.get('page', 1)
          
          try:
              limit = int(limit)
              page = int(page)
              
              if limit < 1 or page < 1:
                  return jsonify({
                      'status': 'error',
                      'error': {
                          'code': 'INVALID_PARAMETER',
                          'message': 'Limit and page must be positive integers'
                      }
                  }), 400
                  
          except (ValueError, TypeError):
              return jsonify({
                  'status': 'error',
                  'error': {
                      'code': 'INVALID_PARAMETER',
                      'message': 'Limit and page must be integers'
                  }
              }), 400
              
          # Calculate offset for pagination
          offset = (page - 1) * limit
          
          conn = sqlite3.connect(config.DB_PATH)
          try:
              cursor = conn.cursor()
              
              # Count total matching records
              count_query = "SELECT COUNT(*) FROM concepts"
              count_params = []
              
              if category:
                  count_query += " WHERE category = ?"
                  count_params.append(category)
                  
              cursor.execute(count_query, count_params)
              total_count = cursor.fetchone()[0]
              
              # Get page of results
              query = "SELECT id, name, category, description FROM concepts"
              params = []
              
              if category:
                  query += " WHERE category = ?"
                  params.append(category)
                  
              query += " ORDER BY name LIMIT ? OFFSET ?"
              params.extend([limit, offset])
              
              cursor.execute(query, params)
              
              # Convert to list of dictionaries
              columns = [column[0] for column in cursor.description]
              concepts = [dict(zip(columns, row)) for row in cursor.fetchall()]
              
              # Build response with pagination metadata
              return jsonify({
                  'status': 'success',
                  'data': concepts,
                  'meta': {
                      'total': total_count,
                      'page': page,
                      'per_page': limit,
                      'pages': (total_count + limit - 1) // limit
                  }
              })
              
          except Exception as e:
              logger.error(f"Error retrieving concepts: {str(e)}")
              return jsonify({
                  'status': 'error',
                  'error': {
                      'code': 'DATABASE_ERROR',
                      'message': 'Error retrieving concepts'
                  }
              }), 500
              
          finally:
              conn.close()

metadata:
  priority: high
  version: 1.0
</rule>
